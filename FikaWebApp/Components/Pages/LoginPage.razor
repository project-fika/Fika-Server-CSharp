@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FikaWebApp.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FikaWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<LoginPage> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]
@attribute [ExcludeFromInteractiveRouting]

<PageTitle>Log in</PageTitle>

<div style="text-align: center;">
	<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>
</div>

<MudContainer Class="d-flex justify-center align-center">
	<MudPaper Class="pa-4">
		<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
			<DataAnnotationsValidator />

			<MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

			<MudGrid>
				<MudItem md="12">
					<MudStaticTextField For="@(() => Input.UserName)" @bind-Value="Input.UserName"
										Label="Username" Placeholder="username"
										UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })" />
				</MudItem>
				<MudItem md="12">
					<MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
										Label="Password" InputType="InputType.Password" Placeholder="password"
										UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
				</MudItem>
				<MudItem md="12">
					<MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe" Color="Color.Primary">Remember me</MudStaticCheckBox>
				</MudItem>
				<MudItem md="12">
					<MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
				</MudItem>
			</MudGrid>
		</EditForm>
	</MudPaper>

	@* <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid> *@
</MudContainer>

@code {

	private string? errorMessage;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	[SupplyParameterFromQuery]
	private string? ReturnUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (HttpMethods.IsGet(HttpContext.Request.Method))
		{
			// Clear the existing external cookie to ensure a clean login process
			await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
		}
	}

	public async Task LoginUser()
	{
		// This doesn't count login failures towards account lockout
		// To enable password failures to trigger account lockout, set lockoutOnFailure: true
		var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
		if (result.Succeeded)
		{
			Logger.LogInformation("User logged in.");
			RedirectManager.RedirectTo(ReturnUrl);
		}
		// else if (result.RequiresTwoFactor)
		// {
		// 	RedirectManager.RedirectTo(
		// 		"Account/LoginWith2fa",
		// 		new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
		// }
		else if (result.IsLockedOut)
		{
			Logger.LogWarning("User account locked out.");
			RedirectManager.RedirectTo("Account/Lockout");
		}
		else
		{
			Logger.LogWarning("Invalid login attempt.");
			errorMessage = "Error: Invalid login attempt.";
		}
	}

	private sealed class InputModel
	{

		[Required]
		public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
